{"ast":null,"code":"import axios from 'axios';\nimport { Express } from 'express';\nclass TestEscrow {\n  static createOffer(buyer, seller, price) {\n    const apiEndpoint = 'https://api.escrow-sandbox.com/2017-09-01/transaction';\n    const email = 'tekital1000@gmail.com';\n    const apiKey = '16851_w2dHAxMU2hwBPMDmIadYwplvcV4RuoGlYdieLAHhRGjK6cxUTqYHAIvxCXTIWRW8';\n    const requestData = {\n      parties: [{\n        role: 'buyer',\n        customer: buyer\n      }, {\n        role: 'seller',\n        customer: seller\n      }],\n      currency: 'usd',\n      description: 'The sale of johnwick.com',\n      items: [{\n        title: 'johnwick.com',\n        description: 'johnwick.com',\n        type: 'domain_name',\n        inspection_period: 259200,\n        quantity: 1,\n        schedule: [{\n          amount: price,\n          payer_customer: 'me',\n          beneficiary_customer: 'keanu.reaves@test.escrow.com'\n        }],\n        extra_attributes: {}\n      }]\n    };\n    const app = Express();\n    const port = 3001; // or any other port you prefer\n\n    app.post('/makeEscrowRequest', async (req, res) => {\n      try {\n        const response = await axios.post(apiEndpoint, req.body, {\n          auth: {\n            username: email,\n            password: apiKey\n          },\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        res.json(response.data);\n      } catch (error) {\n        res.status(500).json({\n          error: 'Internal Server Error'\n        });\n      }\n    });\n    app.listen(port, () => {\n      console.log(`Proxy server is running on port ${port}`);\n    });\n  }\n}\nexport default TestEscrow;","map":{"version":3,"names":["axios","Express","TestEscrow","createOffer","buyer","seller","price","apiEndpoint","email","apiKey","requestData","parties","role","customer","currency","description","items","title","type","inspection_period","quantity","schedule","amount","payer_customer","beneficiary_customer","extra_attributes","app","port","post","req","res","response","body","auth","username","password","headers","json","data","error","status","listen","console","log"],"sources":["/Users/fabiankjellberg/Documents/GitHub/test/src/utilities/TestEscrow.js"],"sourcesContent":["import axios from 'axios';\nimport { Express } from 'express';\n\nclass TestEscrow {\n\n    static createOffer(buyer, seller, price){\n        \n        \n\n        const apiEndpoint = 'https://api.escrow-sandbox.com/2017-09-01/transaction';\n        const email = 'tekital1000@gmail.com';\n        const apiKey = '16851_w2dHAxMU2hwBPMDmIadYwplvcV4RuoGlYdieLAHhRGjK6cxUTqYHAIvxCXTIWRW8';\n\n        const requestData = {\n            parties: [\n                {\n                    role: 'buyer',\n                    customer: buyer,\n                },\n                {\n                    role: 'seller',\n                    customer: seller,\n                },\n            ],\n            currency: 'usd',\n            description: 'The sale of johnwick.com',\n            items: [\n                {\n                    title: 'johnwick.com',\n                    description: 'johnwick.com',\n                    type: 'domain_name',\n                    inspection_period: 259200,\n                    quantity: 1,\n                    schedule: [\n                        {\n                            amount: price,\n                            payer_customer: 'me',\n                            beneficiary_customer: 'keanu.reaves@test.escrow.com',\n                        },\n                    ],\n                    extra_attributes: {\n                        \n                    },\n                },\n            ],\n        };\n\n        \n        \n\n        const app = Express();\n        const port = 3001; // or any other port you prefer\n\n        \n\n        app.post('/makeEscrowRequest', async (req, res) => {\n            try {\n                const response = await axios.post(apiEndpoint, req.body, {\n                    auth: {\n                        username: email,\n                        password: apiKey,\n                    },\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n\n                res.json(response.data);\n            } catch (error) {\n                res.status(500).json({ error: 'Internal Server Error' });\n            }\n        });\n\n        app.listen(port, () => {\n            console.log(`Proxy server is running on port ${port}`);\n        });\n    }\n}export default TestEscrow"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,SAAS;AAEjC,MAAMC,UAAU,CAAC;EAEb,OAAOC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAC;IAIpC,MAAMC,WAAW,GAAG,uDAAuD;IAC3E,MAAMC,KAAK,GAAG,uBAAuB;IACrC,MAAMC,MAAM,GAAG,wEAAwE;IAEvF,MAAMC,WAAW,GAAG;MAChBC,OAAO,EAAE,CACL;QACIC,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAET;MACd,CAAC,EACD;QACIQ,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAER;MACd,CAAC,CACJ;MACDS,QAAQ,EAAE,KAAK;MACfC,WAAW,EAAE,0BAA0B;MACvCC,KAAK,EAAE,CACH;QACIC,KAAK,EAAE,cAAc;QACrBF,WAAW,EAAE,cAAc;QAC3BG,IAAI,EAAE,aAAa;QACnBC,iBAAiB,EAAE,MAAM;QACzBC,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE,CACN;UACIC,MAAM,EAAEhB,KAAK;UACbiB,cAAc,EAAE,IAAI;UACpBC,oBAAoB,EAAE;QAC1B,CAAC,CACJ;QACDC,gBAAgB,EAAE,CAElB;MACJ,CAAC;IAET,CAAC;IAKD,MAAMC,GAAG,GAAGzB,OAAO,CAAC,CAAC;IACrB,MAAM0B,IAAI,GAAG,IAAI,CAAC,CAAC;;IAInBD,GAAG,CAACE,IAAI,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;MAC/C,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAM/B,KAAK,CAAC4B,IAAI,CAACrB,WAAW,EAAEsB,GAAG,CAACG,IAAI,EAAE;UACrDC,IAAI,EAAE;YACFC,QAAQ,EAAE1B,KAAK;YACf2B,QAAQ,EAAE1B;UACd,CAAC;UACD2B,OAAO,EAAE;YACL,cAAc,EAAE;UACpB;QACJ,CAAC,CAAC;QAEFN,GAAG,CAACO,IAAI,CAACN,QAAQ,CAACO,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZT,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;UAAEE,KAAK,EAAE;QAAwB,CAAC,CAAC;MAC5D;IACJ,CAAC,CAAC;IAEFb,GAAG,CAACe,MAAM,CAACd,IAAI,EAAE,MAAM;MACnBe,OAAO,CAACC,GAAG,CAAE,mCAAkChB,IAAK,EAAC,CAAC;IAC1D,CAAC,CAAC;EACN;AACJ;AAAC,eAAezB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}