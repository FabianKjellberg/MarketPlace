{"ast":null,"code":"var _jsxFileName = \"/Users/fabiankjellberg/Documents/GitHub/test/src/components/Carousel/Carousel.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport './Carousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Carousel(props) {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const carouselRef = useRef(null);\n  const updateHeight = () => {\n    const imgElement = carouselRef.current.querySelector(`img[data-index=\"${currentIndex}\"]`);\n    if (imgElement && imgElement.complete) {\n      // Using the natural dimensions of the image to calculate aspect ratio\n      const aspectRatio = imgElement.naturalWidth / imgElement.naturalHeight;\n      const newHeight = carouselRef.current.offsetWidth / aspectRatio;\n      carouselRef.current.style.height = `${newHeight}px`;\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('resize', updateHeight);\n    updateHeight(); // Initial update    \n\n    // Clean up\n    return () => {\n      window.removeEventListener('resize', updateHeight);\n    };\n  }, [currentIndex]);\n  useEffect(() => {\n    // This ensures the height is updated when the images change, for example on component mount\n    updateHeight();\n  }, [props.imageSrc]);\n  const goToPrevious = () => {\n    setCurrentIndex(prevIndex => prevIndex === 0 ? props.imageSrc.length - 1 : prevIndex - 1);\n  };\n  const goToNext = () => {\n    setCurrentIndex(prevIndex => prevIndex === props.imageSrc.length - 1 ? 0 : prevIndex + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carousel\",\n    ref: carouselRef,\n    children: [props.imageSrc.map((src, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n      \"data-index\": index,\n      src: src,\n      alt: `Slide ${index}`,\n      onLoad: updateHeight // Re-calculate height when each image loads\n      ,\n      style: {\n        transform: `translateX(${100 * (index - currentIndex)}%)`\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"previous\",\n      onClick: goToPrevious,\n      children: \"Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next\",\n      onClick: goToNext,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Carousel, \"sbqlQxZ2SRhxzHR7we1jzhTd6uM=\");\n_c = Carousel;\nexport default Carousel;\nvar _c;\n$RefreshReg$(_c, \"Carousel\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","Carousel","props","_s","currentIndex","setCurrentIndex","carouselRef","updateHeight","imgElement","current","querySelector","complete","aspectRatio","naturalWidth","naturalHeight","newHeight","offsetWidth","style","height","window","addEventListener","removeEventListener","imageSrc","goToPrevious","prevIndex","length","goToNext","className","ref","children","map","src","index","alt","onLoad","transform","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/fabiankjellberg/Documents/GitHub/test/src/components/Carousel/Carousel.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport './Carousel.css';\n\nfunction Carousel(props) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const carouselRef = useRef(null);\n  \n  const updateHeight = () => {\n    const imgElement = carouselRef.current.querySelector(`img[data-index=\"${currentIndex}\"]`);\n    if (imgElement && imgElement.complete) {\n      // Using the natural dimensions of the image to calculate aspect ratio\n      const aspectRatio = imgElement.naturalWidth / imgElement.naturalHeight;\n      const newHeight = carouselRef.current.offsetWidth / aspectRatio;\n      carouselRef.current.style.height = `${newHeight}px`;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', updateHeight);\n    updateHeight(); // Initial update    \n\n    // Clean up\n    return () => {\n      window.removeEventListener('resize', updateHeight);\n    };\n  }, [currentIndex]);\n\n  useEffect(() => {\n    // This ensures the height is updated when the images change, for example on component mount\n    updateHeight();\n  }, [props.imageSrc]);\n\n  const goToPrevious = () => {\n    setCurrentIndex((prevIndex) => \n      prevIndex === 0 ? props.imageSrc.length - 1 : prevIndex - 1);\n  };\n\n  const goToNext = () => {\n    setCurrentIndex((prevIndex) => \n      prevIndex === props.imageSrc.length - 1 ? 0 : prevIndex + 1);\n  };\n\n  return (\n    <div className=\"carousel\" ref={carouselRef}>\n      \n      {props.imageSrc.map((src, index) => (\n        <img\n          key={index}\n          data-index={index}\n          src={src}\n          alt={`Slide ${index}`}\n          onLoad={updateHeight} // Re-calculate height when each image loads\n          style={{ transform: `translateX(${100 * (index - currentIndex)}%)` }}\n        />\n      ))}\n\n    <button className=\"previous\" onClick={goToPrevious}>Previous</button>\n    <button className=\"next\" onClick={goToNext}>Next</button>\n    </div>\n  );\n}\n\nexport default Carousel;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}