{"ast":null,"code":"var _jsxFileName = \"/Users/fabiankjellberg/Documents/GitHub/test/src/utilities/BackEndTest.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction BackEndTest() {\n  function postDataToServer() {\n    // URL of your Spring Boot endpoint\n    const apiUrl = 'http://localhost:8080/api/items';\n\n    // Sample data to be sent to the server\n    const data = {\n      name: 'Sample Item'\n    };\n    function getCookie(name) {\n      const cookieString = document.cookie;\n      const cookies = cookieString.split('; ');\n      for (const cookie of cookies) {\n        const [cookieName, cookieValue] = cookie.split('=');\n        if (cookieName === name) {\n          return decodeURIComponent(cookieValue);\n        }\n      }\n      return null;\n    }\n\n    // Make a POST request to the server\n    fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${getCookie(\"access_token\")}`\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(responseData => {\n      // Assuming your server returns the saved item data\n      console.log('Data saved successfully:', responseData);\n\n      // You can now set the data on your UI or perform any other action\n      // For simplicity, let's log it to the console\n      // Replace this with your actual UI update logic\n    }).catch(error => {\n      console.log(getCookie(\"access_token\"));\n      console.error('Error:', error);\n    });\n  }\n\n  // Call the function to trigger the POST request\n  postDataToServer();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: postDataToServer,\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = BackEndTest;\nexport default BackEndTest;\nfunction postDataToServer() {\n  // URL of your Spring Boot endpoint\n  const apiUrl = 'http://localhost:8080/api/items';\n\n  // Sample data to be sent to the server\n  const data = {\n    name: 'Sample Item'\n  };\n\n  // Make a POST request to the server\n  fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => response.json()).then(responseData => {\n    // Assuming your server returns the saved item data\n    console.log('Data saved successfully:', responseData);\n\n    // You can now set the data on your UI or perform any other action\n    // For simplicity, let's log it to the console\n    // Replace this with your actual UI update logic\n  }).catch(error => {\n    console.error('Error:', error);\n  });\n}\n\n// Call the function to trigger the POST request\npostDataToServer();\nvar _c;\n$RefreshReg$(_c, \"BackEndTest\");","map":{"version":3,"names":["BackEndTest","postDataToServer","apiUrl","data","name","getCookie","cookieString","document","cookie","cookies","split","cookieName","cookieValue","decodeURIComponent","fetch","method","headers","body","JSON","stringify","then","response","json","responseData","console","log","catch","error","_jsxDEV","_Fragment","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fabiankjellberg/Documents/GitHub/test/src/utilities/BackEndTest.js"],"sourcesContent":["\n\nfunction BackEndTest(){\n\n    function postDataToServer() {\n        // URL of your Spring Boot endpoint\n        const apiUrl = 'http://localhost:8080/api/items';\n      \n        // Sample data to be sent to the server\n        const data = {\n          name: 'Sample Item',\n        };\n\n        function getCookie(name) {\n            const cookieString = document.cookie;\n            const cookies = cookieString.split('; ');\n        \n            for (const cookie of cookies) {\n                const [cookieName, cookieValue] = cookie.split('=');\n                if (cookieName === name) {\n                    return decodeURIComponent(cookieValue);\n                }\n            }\n        \n            return null;\n        }\n      \n        // Make a POST request to the server\n        fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${getCookie(\"access_token\")}`\n          },\n          body: JSON.stringify(data),\n        })\n          .then(response => response.json())\n          .then(responseData => {\n            // Assuming your server returns the saved item data\n            console.log('Data saved successfully:', responseData);\n            \n            // You can now set the data on your UI or perform any other action\n            // For simplicity, let's log it to the console\n            // Replace this with your actual UI update logic\n          })\n          .catch(error => {\n            console.log(getCookie(\"access_token\"))\n            console.error('Error:', error);\n          });\n      }\n      \n      // Call the function to trigger the POST request\n      postDataToServer();\n\n    return (\n        <>\n            <button onClick={postDataToServer}>test</button>\n        </>\n    )\n} export default BackEndTest\n\nfunction postDataToServer() {\n    // URL of your Spring Boot endpoint\n    const apiUrl = 'http://localhost:8080/api/items';\n  \n    // Sample data to be sent to the server\n    const data = {\n      name: 'Sample Item',\n    };\n  \n    // Make a POST request to the server\n    fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(response => response.json())\n      .then(responseData => {\n        // Assuming your server returns the saved item data\n        console.log('Data saved successfully:', responseData);\n  \n        // You can now set the data on your UI or perform any other action\n        // For simplicity, let's log it to the console\n        // Replace this with your actual UI update logic\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  }\n  \n  // Call the function to trigger the POST request\n  postDataToServer();\n  "],"mappings":";;;AAEA,SAASA,WAAWA,CAAA,EAAE;EAElB,SAASC,gBAAgBA,CAAA,EAAG;IACxB;IACA,MAAMC,MAAM,GAAG,iCAAiC;;IAEhD;IACA,MAAMC,IAAI,GAAG;MACXC,IAAI,EAAE;IACR,CAAC;IAED,SAASC,SAASA,CAACD,IAAI,EAAE;MACrB,MAAME,YAAY,GAAGC,QAAQ,CAACC,MAAM;MACpC,MAAMC,OAAO,GAAGH,YAAY,CAACI,KAAK,CAAC,IAAI,CAAC;MAExC,KAAK,MAAMF,MAAM,IAAIC,OAAO,EAAE;QAC1B,MAAM,CAACE,UAAU,EAAEC,WAAW,CAAC,GAAGJ,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;QACnD,IAAIC,UAAU,KAAKP,IAAI,EAAE;UACrB,OAAOS,kBAAkB,CAACD,WAAW,CAAC;QAC1C;MACJ;MAEA,OAAO,IAAI;IACf;;IAEA;IACAE,KAAK,CAACZ,MAAM,EAAE;MACZa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASX,SAAS,CAAC,cAAc,CAAE;MACvD,CAAC;MACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,IAAI;IAC3B,CAAC,CAAC,CACCiB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,YAAY,IAAI;MACpB;MACAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,YAAY,CAAC;;MAErD;MACA;MACA;IACF,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;MACdH,OAAO,CAACC,GAAG,CAACpB,SAAS,CAAC,cAAc,CAAC,CAAC;MACtCmB,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;EACN;;EAEA;EACA1B,gBAAgB,CAAC,CAAC;EAEpB,oBACI2B,OAAA,CAAAC,SAAA;IAAAC,QAAA,eACIF,OAAA;MAAQG,OAAO,EAAE9B,gBAAiB;MAAA6B,QAAA,EAAC;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC,gBAClD,CAAC;AAEX;AAACC,EAAA,GAzDQpC,WAAW;AAyDlB,eAAeA,WAAW;AAE5B,SAASC,gBAAgBA,CAAA,EAAG;EACxB;EACA,MAAMC,MAAM,GAAG,iCAAiC;;EAEhD;EACA,MAAMC,IAAI,GAAG;IACXC,IAAI,EAAE;EACR,CAAC;;EAED;EACAU,KAAK,CAACZ,MAAM,EAAE;IACZa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,IAAI;EAC3B,CAAC,CAAC,CACCiB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,YAAY,IAAI;IACpB;IACAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,YAAY,CAAC;;IAErD;IACA;IACA;EACF,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;IACdH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAChC,CAAC,CAAC;AACN;;AAEA;AACA1B,gBAAgB,CAAC,CAAC;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}