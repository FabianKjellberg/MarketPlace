{"ast":null,"code":"import axios from 'axios';\nclass TestEscrow {\n  static async createOffer(buyer, seller, price) {\n    console.log(buyer, seller, price);\n    axios.post('http://localhost:8080/public/transaction', {\n      'buyer': buyer,\n      'seller': seller,\n      'price': price\n    }, {\n      'Content-Type': 'application/json'\n    }).then(data => {\n      console.log(data);\n    });\n\n    /*const apiEndpoint = 'https://api.escrow-sandbox.com/2017-09-01/transaction';\n    const email = 'tekital1000@gmail.com';\n    const apiKey = '16851_w2dHAxMU2hwBPMDmIadYwplvcV4RuoGlYdieLAHhRGjK6cxUTqYHAIvxCXTIWRW8';\n    const authorizationHeader = `Basic ${btoa(`${email}:${apiKey}`)}`;\n     const requestData = {\n        parties: [\n            {\n                role: 'buyer',\n                customer: buyer,\n            },\n            {\n                role: 'seller',\n                customer: seller,\n            },\n        ],\n        currency: 'usd',\n        description: 'The sale of johnwick.com',\n        items: [\n            {\n                title: 'johnwick.com',\n                description: 'johnwick.com',\n                type: 'domain_name',\n                inspection_period: 259200,\n                quantity: 1,\n                schedule: [\n                    {\n                        amount: price,\n                        payer_customer: 'me',\n                        beneficiary_customer: 'keanu.reaves@test.escrow.com',\n                    },\n                ],\n                extra_attributes: {\n                    \n                },\n            },\n        ],\n    };\n     try {\n        const response = await fetch(apiEndpoint, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': authorizationHeader\n            },\n            body: JSON.stringify(requestData),\n        });\n             if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n             const data = await response.json();\n             console.log('Escrow API Response:', data);\n    } catch (error) {\n        console.error('Error making API request:', error.message);\n    } */\n  }\n}\nexport default TestEscrow;","map":{"version":3,"names":["axios","TestEscrow","createOffer","buyer","seller","price","console","log","post","then","data"],"sources":["/Users/fabiankjellberg/Documents/GitHub/test/src/utilities/TestEscrow.js"],"sourcesContent":["import axios from 'axios';\n\nclass TestEscrow {\n\n    static async createOffer(buyer, seller, price){\n        \n        console.log(buyer,seller,price);\n        axios.post('http://localhost:8080/public/transaction',\n        {\n            \n            'buyer': buyer,\n            'seller': seller,\n            'price': price\n        },\n        {'Content-Type': 'application/json',}\n        ).then((data) => {\n            console.log(data)\n        })\n\n        /*const apiEndpoint = 'https://api.escrow-sandbox.com/2017-09-01/transaction';\n        const email = 'tekital1000@gmail.com';\n        const apiKey = '16851_w2dHAxMU2hwBPMDmIadYwplvcV4RuoGlYdieLAHhRGjK6cxUTqYHAIvxCXTIWRW8';\n        const authorizationHeader = `Basic ${btoa(`${email}:${apiKey}`)}`;\n\n        const requestData = {\n            parties: [\n                {\n                    role: 'buyer',\n                    customer: buyer,\n                },\n                {\n                    role: 'seller',\n                    customer: seller,\n                },\n            ],\n            currency: 'usd',\n            description: 'The sale of johnwick.com',\n            items: [\n                {\n                    title: 'johnwick.com',\n                    description: 'johnwick.com',\n                    type: 'domain_name',\n                    inspection_period: 259200,\n                    quantity: 1,\n                    schedule: [\n                        {\n                            amount: price,\n                            payer_customer: 'me',\n                            beneficiary_customer: 'keanu.reaves@test.escrow.com',\n                        },\n                    ],\n                    extra_attributes: {\n                        \n                    },\n                },\n            ],\n        };\n\n        try {\n            const response = await fetch(apiEndpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': authorizationHeader\n                },\n                body: JSON.stringify(requestData),\n            });\n    \n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n    \n            const data = await response.json();\n    \n            console.log('Escrow API Response:', data);\n        } catch (error) {\n            console.error('Error making API request:', error.message);\n        } */\n    }\n}export default TestEscrow"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,CAAC;EAEb,aAAaC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAC;IAE1CC,OAAO,CAACC,GAAG,CAACJ,KAAK,EAACC,MAAM,EAACC,KAAK,CAAC;IAC/BL,KAAK,CAACQ,IAAI,CAAC,0CAA0C,EACrD;MAEI,OAAO,EAAEL,KAAK;MACd,QAAQ,EAAEC,MAAM;MAChB,OAAO,EAAEC;IACb,CAAC,EACD;MAAC,cAAc,EAAE;IAAmB,CACpC,CAAC,CAACI,IAAI,CAAEC,IAAI,IAAK;MACbJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;IACrB,CAAC,CAAC;;IAEF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAMI;AACJ;AAAC,eAAeT,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}